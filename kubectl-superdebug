#!/usr/bin/env bash
set -euo pipefail
# Mandatory
pod=""
target=""
image=""
# Optional
namespace=""
proxy_port="8001"
command="/bin/bash"

function help {
    echo "kubectl-superdebug <pod> <-t target> [-n namespace] [-I image] [-P proxy-port] [-C command]

Attach an ephemeral debug container to a running container in a running pod.
The ephemeral container shares the PID namespace and volume attachments with the target container.
The ability to copy the volume attachments separates the functionality from that of kubectl debug.

Options:
    pod: The pod to attach the debug container to
    target: The container to attach the debug container to
    namespace: The namespace of the pod (default: current context namespace)
    image: The image to use for the debug container (default: platform debug image or ubuntu:latest)
    command: The command to run in the debug container (default: /bin/bash)
    proxy-port: The port to use for kubectl proxy, used by this script in the backendd (default: 8001)

Images:
You can specify a custom image for the debug container to use with the -I option.
If the image is located in a private repository, the image pull secret required to pull the image must be present in the pod.
If no image is specified, the script will attempt to use the platform debug image.
If the secret required to pull the platform debug image is not available, the script will use ubuntu:latest.
"
}

while [[ $# -gt 0 ]]; do
    case "$1" in
    -p | --pod)
        pod="$2"
        shift 2
        ;;
    -t | --target)
        target="$2"
        shift 2
        ;;
    -i | --image)
        image="$2"
        shift 2
        ;;
    -n | --namespace)
        namespace="$2"
        shift 2
        ;;
    -P | --proxy-port)
        proxy_port="$2"
        shift 2
        ;;
    -C | --command)
        command="$2"
        shift 2
        ;;
    -h | --help | help)
        help
        exit 0
        ;;
    *)
        if [ -z "$pod" ]; then
            pod="$1"
        else
            echo "Unknown option provided ${1:-}" >&2
            exit 1
        fi
        ;;
    esac
done

if [ -z "$pod" ]; then
    echo "Specify a pod to target (-p)" 1>&2
    exit 1
fi
if [ -z "$target" ]; then
    echo "Specify a container to target (-t)" 1>&2
    exit 1
fi
if [ -z "$namespace" ]; then
    namespace="$(kubectl config get-contexts "$(kubectl config current-context)" | tail -n1 | awk '{ print $5 }')"
    echo "Using default namespace ${namespace}" 1>&2
fi

kill_kubectl_proxy() {
    echo "Stopping kube proxy" 1>&2
    # shellcheck disable=SC2046
    kill $(jobs -pr)
}

echo "Retrieving pod spec" 1>&2
pod_spec=$(kubectl get pod -n "$namespace" "$pod" -ojson)

check_existing() {
    echo "Checking for existing ephemeral containers" 1>&2
    local running
    running=$(jq '.status.ephemeralContainerStatuses[] | select(.state | has("running")).name' -r 2>/dev/null <<<"$pod_spec") || :
    if [ -z "$running" ]; then
        return
    fi
    if [[ "$running" == "null" ]]; then
        return
    fi
    echo "Ephemeral containers are already running on this pod" 1>&2
    echo "You can connect to them using the following commands:" 1>&2
    local container
    for container in $running; do
        echo -e "\tkubectl -n services attach \"${pod}\" -i -t -c \"${container}\"" 1>&2
    done
    echo
    echo -n "Do you want to continue creating a new ephemeral container? [y/N]" 1>&2
    read -r answer
    if [[ "$answer" != "y" ]]; then
        echo "Aborting" 1>&2
        exit 1
    fi
}

check_existing
patches_string=","
mounts="$(kubectl get pod ${pod} -n ${namespace} -ojson | jq '[.spec.containers[] | select(.name == "'"${target}"'").volumeMounts[] | select(has("subPath") | not)]' -r)"
if [[ "$mounts" != "null" ]]; then
    patches_string="\"volumeMounts\": $mounts,"
fi

#shellcheck disable=SC2018
# LC_ALL is set to C to avoid the error "tr: Illegal byte sequence" when running on Mac
random_suffix="$({ LC_ALL=C tr -dc 'a-z' </dev/urandom || :; } | head -c6)"
container_name="debug-${random_suffix}"

echo "Starting kube proxy" 1>&2
kubectl proxy --port "${proxy_port}" 1>&2 &
trap 'kill_kubectl_proxy' SIGINT SIGTERM EXIT

echo "Waiting for proxy to come up..." 1>&2
sleep 2

patch=$(
    cat <<EOF
{
    "spec":
    {
        "ephemeralContainers": [{
            ${patches_string}
            "name": "${container_name}",
            "image": "${image}",
            "command": ["${command}"],
            "stdin": true,
            "tty": true,
            "targetContainerName": "${target}"
        }]
    }
}
EOF
)

# alternatively, construct a JSON patch and apply a patch Content-Type: application/json-patch+json
echo "Patching pod ${pod}, creating ephemeral container ${container_name}" 1>&2
curl http://localhost:${proxy_port}/api/v1/namespaces/${namespace}/pods/${pod}/ephemeralcontainers \
    -X PATCH \
    -H "Content-Type: application/strategic-merge-patch+json" \
    --data "${patch}" \
    -v \
    -f ||
    {
        echo "Pod patching unsuccesful" 1>&2
        exit 1
    }

echo Created ephemeral debug container. Give it some time to start, then connect to it using the following command:
echo
echo -e "\tkubectl -n ${namespace} attach ${pod} -i -t -c \"${container_name}\""
echo
echo You may disconnect from the debug container by pressing Ctrl-P followed by Ctrl-D.
echo If you exit the shell, the debug container will be terminated.
